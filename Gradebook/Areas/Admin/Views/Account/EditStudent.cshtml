@model Gradebook.Models.ApplicationUser
@using Gradebook.Utils
@{
    LocalizedStrings.LanguageDictionary D = LocalizedStrings.Account.Edit[ViewBag.LanguageId];
    ViewBag.Title = D["Edit"];
    ViewBag.ParentId = new LinkedList<SelectListItem>();
}

<h2>@ViewBag.Title</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <div class="alert alert-danger">@ViewBag.ValidationMessage</div>

        @Html.HiddenFor(m => m.Id)

        <div class="form-group">
            @Html.LabelFor(m => m.Name, D["Name"], htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(m => m.Name, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Surname, D["Surname"], htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(m => m.Surname, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Email, D["Email"], htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(m => m.Email, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.PhoneNumber, D["Phone number"], htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(m => m.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("parentId", D["Parent"], htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("parentId")
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @Html.ActionLink(D["Back"], "List", null, new { @class = "btn btn-default" })
                <input type="submit" value="@D["Save"]" class="btn btn-primary" />
            </div>
        </div>
    </div>
}

@section styles {
    @Styles.Render("~/Content/selectize")
}
@section scripts {
@Scripts.Render("~/Scripts/selectize/selectize.js")
<script type="text/javascript">
$(document).ready(function () {
    const parentRenderOption = {
        option: function (it, escape) {
            return '<div class="selectDiv">' +
                '<span class="mainName">' + escape(it.Email) + '</span><br />' +
                '<span class="subLabel">@D["Name"]: </span>' +
                '<span class="subValue">' + escape(it.Name) + '</span>' +
                '<span class="subLabel">@D["Surname"]: </span>' +
                '<span class="subValue">' + escape(it.Surname) + '</span>' +
                '</div>';
        },
        item: function(item, escape) {
            return '<div>' + escape(item.Name) + ' ' + escape(item.Surname) + '</div>';
        }
    };
    const parentSelect = $('#parentId').selectize({
        valueField: 'Id', labelField: 'Email', searchField: ['Surname', 'Name', 'Email'], sortField: 'Surname',
        onInitialize: function () {
            $.ajax({
                url: '/Admin/Account/GetParents',
                type: 'POST',
                success: function (parents) {
                    const selectize = parentSelect[0].selectize;
                    for (let i = 0; i < parents.length; ++i)
                        selectize.addOption(parents[i]);
                    selectize.setValue('@ViewBag.SelectedParentId');
                },
                error: function (response) { console.log(response); }
            });
        }, render: parentRenderOption
    });
});
</script>
}
