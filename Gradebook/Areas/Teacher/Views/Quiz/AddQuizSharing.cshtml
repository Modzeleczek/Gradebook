@model Gradebook.Models.QuizSharing
@using Gradebook.Utils;
@{
    LocalizedStrings.LanguageDictionary D = LocalizedStrings.Quiz.AddQuizSharing[ViewBag.LanguageId];
    ViewBag.Title = D["Grant access"];
    var quizId = (int)ViewBag.QuizId;
    ViewBag.ClassId = new LinkedList<SelectListItem>();
}

<h2>@ViewBag.Title</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <div class="alert alert-danger">@ViewBag.ValidationMessage</div>

        @Html.Hidden("quizId", quizId)

        <div class="form-group">
            @Html.LabelFor(model => model.ClassId, D["Class"], htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("classId")
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.GradeWeight, D["Grade weight"], htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.GradeWeight, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @Html.ActionLink(D["Back"], "Edit", new { id = quizId }, new { @class = "btn btn-default" })
                <button type="submit" name="button" value="Add" class="btn btn-primary">@D["Grant access"]</button>
            </div>
        </div>
    </div>
}

@section styles {
    @Styles.Render("~/Content/selectize")
}
@section scripts {
@Scripts.Render("~/Scripts/selectize/selectize.js")
<script type="text/javascript">
$(document).ready(function () {
    const classRenderOption = {
        option: function (item, escape) {
            return '<div class="selectDiv">' +
                '<span class="mainName">' + escape(item.Year) + ' ' + escape(item.Unit) + '</span>' +
                '</div>';
        },
        item: function(item, escape) {
            return '<div>' + escape(item.Year) + ' ' + escape(item.Unit) + '</div>';
        }
    };
    const classSelect = $('#classId').selectize({
        valueField: 'Id', labelField: 'Year', searchField: ['Year', 'Unit'], sortField: 'Year',
        onInitialize: function () {
            $.ajax({
                url: '/Teacher/Quiz/GetUnusedClasses?quizId=@quizId',
                type: 'POST',
                success: function (classes) {
                    const selectize = classSelect[0].selectize;
                    for (let i = 0; i < classes.length; ++i)
                        selectize.addOption(classes[i]);
                    selectize.setValue('@Model.ClassId');
                },
                error: function (response) { console.log(response); }
            });
        }, render: classRenderOption
    });
});
</script>
}
