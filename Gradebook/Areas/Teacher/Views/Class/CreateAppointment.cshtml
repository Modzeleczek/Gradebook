@model Gradebook.Models.Appointment
@using Gradebook.Utils;
@{
    LocalizedStrings.LanguageDictionary D = LocalizedStrings.Class.CreateAppointment[ViewBag.LanguageId];
    ViewBag.Title = D["Create appointment"];
    var datepickerLanguage = (string)ViewBag.DatepickerLanguage;
}

<h2>@ViewBag.Title</h2>

@using (Html.BeginForm("CreateAppointment", "Class", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <div class="alert alert-danger">@ViewBag.ValidationMessage</div>
        @Html.Hidden("teacherClassSubjectId", (int)ViewBag.TeacherClassSubjectId)

        <div class="form-group">
            @Html.LabelFor(model => model.Name, D["Name"], htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Name, new { @class = "form-control" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Name, D["Description"], htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Description, new { @class = "form-control" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Date, D["Date"], htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="text" name="Date" class="form-control datepicker" autocomplete="off">
            </div>
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            @if (ViewBag.ClassId != null)
            { @Html.ActionLink(D["Back"], "Details", new { id = (int)ViewBag.ClassId }, new { @class = "btn btn-default" }) }
            <button type="submit" name="button" value="Create" class="btn btn-primary">@D["Create"]</button>
        </div>
    </div>
}

@section styles {
    @Styles.Render("~/Content/bootstrap_datepicker/bootstrap-datepicker.css")
}
@section scripts {
@Scripts.Render("~/Scripts/bootstrap_datepicker/bootstrap-datepicker.js")
@Scripts.Render("~/Scripts/bootstrap_datepicker/bootstrap-datepicker.pl.min.js")
<script type="text/javascript">
    const possibleWeekDays = [0, @ViewBag.PossibleWeekDays];
    const dateToday = new Date();
    const dateFromServer = new Date(@Model.Date.Year, @Model.Date.Month, @Model.Date.Day);
    $('.datepicker').datepicker({
        language: '@datepickerLanguage',
        format: 'dd/mm/yyyy',
        beforeShowDay: function (date) {
            if (date < dateToday) return false;
            const weekDay = date.getDay();
            if (possibleWeekDays[weekDay] === 1) return true;
            else return false;
        },
        setDate: dateFromServer,
        autoclose: true
    });
</script>
}
